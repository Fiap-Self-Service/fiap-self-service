name: CI/CD - fiap-self-service

on:
  push:
    branches:
      - main

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Check test status
      run: echo "::set-output name=test_failed::$(grep -q 'Test Suites:.*failed' ./test-results.txt && echo true || echo false)"

    - name: Stop on test failure
      if: ${{ steps.check_test_status.outputs.test_failed == 'true' }}
      run: exit 1

  code-analisys:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Run SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npm install -g sonar-scanner
        sonar-scanner \
          -Dsonar.projectKey=jacksonwc2 \
          -Dsonar.organization="Jackson Willian Carbonera" \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  
  build-docker-image:
    runs-on: ubuntu-latest
    needs: code-analisys
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        run: docker login -u jacksoncarbonera -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t jacksoncarbonera/fiap-self-service .
          docker push jacksoncarbonera/fiap-self-service
    
  deploy-aws:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name fiap-k8s-cluster --region us-east-1

      - name: Deploy to EKS
        run: |
          kubectl apply -f kubernetes/metrics  
          kubectl apply -f kubernetes/api 

      - name: Verificar Status do Deploy
        run: kubectl get pods